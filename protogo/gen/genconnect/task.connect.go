// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: task.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/moonorange/gomicroservice/protogo/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "task.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/task.TaskService/CreateTask"
	// TaskServiceGetTaskProcedure is the fully-qualified name of the TaskService's GetTask RPC.
	TaskServiceGetTaskProcedure = "/task.TaskService/GetTask"
	// TaskServiceListTasksByTagProcedure is the fully-qualified name of the TaskService's
	// ListTasksByTag RPC.
	TaskServiceListTasksByTagProcedure = "/task.TaskService/ListTasksByTag"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	taskServiceServiceDescriptor              = gen.File_task_proto.Services().ByName("TaskService")
	taskServiceCreateTaskMethodDescriptor     = taskServiceServiceDescriptor.Methods().ByName("CreateTask")
	taskServiceGetTaskMethodDescriptor        = taskServiceServiceDescriptor.Methods().ByName("GetTask")
	taskServiceListTasksByTagMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("ListTasksByTag")
)

// TaskServiceClient is a client for the task.TaskService service.
type TaskServiceClient interface {
	CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error)
	ListTasksByTag(context.Context, *connect.Request[gen.ListTasksByTagRequest]) (*connect.Response[gen.ListTasksByTagResponse], error)
}

// NewTaskServiceClient constructs a client for the task.TaskService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		createTask: connect.NewClient[gen.CreateTaskRequest, gen.CreateTaskResponse](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[gen.GetTaskRequest, gen.GetTaskResponse](
			httpClient,
			baseURL+TaskServiceGetTaskProcedure,
			connect.WithSchema(taskServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTasksByTag: connect.NewClient[gen.ListTasksByTagRequest, gen.ListTasksByTagResponse](
			httpClient,
			baseURL+TaskServiceListTasksByTagProcedure,
			connect.WithSchema(taskServiceListTasksByTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	createTask     *connect.Client[gen.CreateTaskRequest, gen.CreateTaskResponse]
	getTask        *connect.Client[gen.GetTaskRequest, gen.GetTaskResponse]
	listTasksByTag *connect.Client[gen.ListTasksByTagRequest, gen.ListTasksByTagResponse]
}

// CreateTask calls task.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls task.TaskService.GetTask.
func (c *taskServiceClient) GetTask(ctx context.Context, req *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTasksByTag calls task.TaskService.ListTasksByTag.
func (c *taskServiceClient) ListTasksByTag(ctx context.Context, req *connect.Request[gen.ListTasksByTagRequest]) (*connect.Response[gen.ListTasksByTagResponse], error) {
	return c.listTasksByTag.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the task.TaskService service.
type TaskServiceHandler interface {
	CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error)
	ListTasksByTag(context.Context, *connect.Request[gen.ListTasksByTagRequest]) (*connect.Response[gen.ListTasksByTagResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceCreateTaskHandler := connect.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceGetTaskHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(taskServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceListTasksByTagHandler := connect.NewUnaryHandler(
		TaskServiceListTasksByTagProcedure,
		svc.ListTasksByTag,
		connect.WithSchema(taskServiceListTasksByTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/task.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskProcedure:
			taskServiceGetTaskHandler.ServeHTTP(w, r)
		case TaskServiceListTasksByTagProcedure:
			taskServiceListTasksByTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect.Request[gen.CreateTaskRequest]) (*connect.Response[gen.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("task.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTask(context.Context, *connect.Request[gen.GetTaskRequest]) (*connect.Response[gen.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("task.TaskService.GetTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) ListTasksByTag(context.Context, *connect.Request[gen.ListTasksByTagRequest]) (*connect.Response[gen.ListTasksByTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("task.TaskService.ListTasksByTag is not implemented"))
}
